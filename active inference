import numpy as np
import matplotlib.pyplot as plt

# Définir les états économiques possibles
states = {
    'low_wealth': (0, 1000),
    'low-medium_wealth': (1001, 5000),
    'medium_wealth': (5001, 20000),
    'medium-high_wealth': (20001, 100000),
    'high_wealth': (100001, float('inf')),
    'being_ejected': (float('-inf'), float('-inf'))
}

# Définir les observations possibles
observations = [
    'no_debt', 'low_debt', 'medium_debt', 'high_debt',
    'low_interest', 'medium_interest', 'high_interest',
    'low_price', 'medium_price', 'high_price']

debt_levels = {
    'no_debt': (0,0),
    'low_debt': (1, 100),
    'medium_debt': (101, 400),
    'high_debt': (401, 500)
}

interest_rates = {
    'low_interest': (0, 0.02),
    'medium_interest': (0.021, 0.05),
    'high_interest': (0.051, 0.1)
}

market_prices = {
    'low_price': (0, 80),
    'medium_price': (81, 120),
    'high_price': (121, float('inf'))
}

# Définir les actions possibles
actions = ['buy', 'hold', 'sell']

# Création de la matrice A
def create_A_matrix(states, observations):
    num_states = len(states)
    num_observations = len(observations)
    
    A = np.zeros((num_observations, num_states))
    
    for i in range(num_states):
        for j in range(num_observations):
            A[j, i] = 1.0 / num_observations  # Simplification: probabilité égale pour chaque observation

    return A

# Création de la matrice B
def create_B_matrix(states, actions, market_prices):
    num_states = len(states)
    num_actions = len(actions)
    B = np.zeros((num_states, num_states, num_actions))
    
    for action_id, action in enumerate(actions):
        for i, (state_from, (min_val, max_val)) in enumerate(states.items()):
            for j, (state_to, _) in enumerate(states.items()):
                if action == 'buy':
                    if market_prices['low_price'][0] <= max_val <= market_prices['high_price'][1]:
                        B[j, i, action_id] = 0.6 if state_to > state_from else 0.2
                elif action == 'sell':
                    if market_prices['low_price'][0] <= max_val <= market_prices['high_price'][1]:
                        B[j, i, action_id] = 0.6 if state_to < state_from else 0.2
                elif action == 'hold':
                    B[j, i, action_id] = 0.8 if state_to == state_from else 0.1
    
    # Normaliser
    for action_id in range(num_actions):
        for i in range(num_states):
            denom=np.sum(B[:,i,action_id])
            if denom>0:
                B[:, i, action_id] /= np.sum(B[:, i, action_id])
    return B

# Création de la matrice C
def create_C_matrix(observations,states):
    num_observations = len(observations)
    C = np.zeros((num_observations, 1))
    
    # L'agent ne veut pas être éjecté
    if 'being_ejected' in observations:
        C[observations.index('being_ejected')] = -100
    
    # L'agent veut s'enrichir (valeur plus élevée pour les états de richesse plus élevés)
    for i, observation in enumerate(observations):
        if 'wealth' in observation:
            if 'low' in observation:
                C[i] = 1
            elif 'medium' in observation:
                C[i] = 2
            elif 'high' in observation:
                C[i] = 3
    
    return C

num_states = len(states)
num_observations = len(observations)
num_actions = len(actions)

A = create_A_matrix(states, observations)
B = create_B_matrix(states, actions, market_prices)
C = create_C_matrix(observations, states)

# Verifier la bonne dimension des matrices
print("A shape:", A.shape)
print("B shape:", B.shape)
print("C shape:", C.shape)

class Asset:
    def __init__(self, intrinsic_value):
        self.intrinsic_value = intrinsic_value

class AgentState:
    def __init__(self, wealth, debt, assets, A, B, C):
        self.wealth = wealth
        self.debt = debt
        self.assets = assets  # Portefeuille d'actions
        self.beliefs = np.ones(len(states)) / len(states)
        self.last_prices = [0] * 3  # Stock des derniers prix d'actions vendues
        self.A = A
        self.B = B
        self.C = C
        self.update_intrinsic_value()

    def update_intrinsic_value(self):
        if self.assets:
            self.intrinsic_value = np.mean([asset.intrinsic_value for asset in self.assets])
        else:
            self.intrinsic_value = 0
            
    def decide(self, current_observation):
        wealth_state, debt_state, price_state = current_observation
    
        # Mise à jour des croyances basée sur l'observation actuelle
        self.beliefs = self.update_beliefs(self.beliefs, debt_state, price_state)
    
        # Sélectionner une action basée sur les croyances actuelles
        action = self.sample_action(self.beliefs, self.B, self.C)
        return action

    def update_beliefs(self, beliefs, debt_state, price_state):
        # Calculer la probabilité de l'observation pour chaque état
        observation_probs = np.ones_like(beliefs)
    
        debt_idx = observations.index(debt_state)
        price_idx = observations.index(price_state)
    
        observation_probs *= self.A[debt_idx, :]
        observation_probs *= self.A[price_idx, :]
    
        # Mettre à jour les croyances
        updated_beliefs = beliefs * observation_probs
        updated_beliefs /= np.sum(updated_beliefs)  # Normalise les croyances
    
        return updated_beliefs

    def sample_action(self, beliefs, B, C):
        num_states = len(states)
        num_actions = len(actions)
        action_values = np.zeros(num_actions)

        for action_idx in range(num_actions):
            for state_idx in range(num_states):
                action_values[action_idx] += beliefs[state_idx] * np.dot(B[:, state_idx, action_idx], C[:, 0])

        action_idx = np.argmax(action_values)
        return action_idx

class DecisionSpace:

    def __init__(self, agents):
        self.agents = agents
        self.market_price = 0

    def make_decisions(self):
        agents_to_remove = []
        for agent in self.agents:
            # Etape 1: L'agent tente de rembourser ses dettes
            if agent.debt > 0:
                if agent.wealth >= agent.debt:
                    # L'agent peut rembourser toute sa dette
                    agent.wealth -= agent.debt
                    agent.debt = 0
                else:
                    # L'agent ne peut pas rembourser du tout, il est hors jeu
                    agents_to_remove.append(agent)
                    agent.state = 'being_ejected'
                    continue

            # Etape 2: Mise à jour des préférences
            self.update_preferences(agent)

            # Etape 3: Offres ventes/achats
            self.broadcast_offers(agent)

            # Step 4: Décision d'achats/ventes
            self.decide_on_offers(agent)

            # Mise à jour de la richesse après les décisions
            self.update_wealth(agent)

        for agent in agents_to_remove:
            self.agents.remove(agent)

    def update_preferences(self, agent):
        current_wealth_state = self.get_wealth_state(agent.wealth)
        current_debt_state = self.get_debt_state(agent.debt)
        current_market_price = self.market_price

        # Les préférences de l'agent sont mises à jour en fonction de son état actuel et de ses observations
        for i, observation in enumerate(observations):
            if observation.startswith(current_wealth_state):
                agent.C[i] += 1  # Préférence accrue pour l'état de richesse actuel
            if observation.startswith(current_debt_state):
                agent.C[i] -= 1  # Préférence réduite pour l'état de dette actuel
            if observation == self.get_price_state(current_market_price):
                agent.C[i] += 0.5  # Légère préférence pour le prix de marché actuel

    def broadcast_offers(self, agent):
        current_observation = self.get_current_observation(agent)
        action = agent.decide(current_observation)

        if action == actions.index('buy'):
            offer_price = max(0, self.market_price * (1 - np.random.uniform(0, 0.1)))
            return ('buy', offer_price)
        elif action == actions.index('sell'):
            offer_price = self.market_price * (1 + np.random.uniform(0, 0.1))
            return ('sell', offer_price)
        else:
            return ('hold', None)

    def get_current_observation(self, agent):
        wealth_state = self.get_wealth_state(agent.wealth)
        debt_state = self.get_debt_state(agent.debt)
        price_state = self.get_price_state(self.market_price)
        return wealth_state, debt_state, price_state


    def get_wealth_state(self, wealth):
        for state, (min_val, max_val) in states.items():
            if min_val <= wealth <= max_val:
                return state
        return 'being_ejected'

    def get_debt_state(self, debt):
        for state, (min_val, max_val) in debt_levels.items():
            if min_val <= debt <= max_val:
                return state
        return 'high_debt'

    def get_price_state(self, price):
        for state, (min_val, max_val) in market_prices.items():
            if min_val <= price <= max_val:
                return state
        return 'high_price'

    def update_wealth(self, agent):
        # Calcul de la nouvelle richesse de l'agent
        agent.wealth += sum([asset.intrinsic_value for asset in agent.assets])

    def calculate_market_price(self):
        # Calcul du prix du marché comme moyenne des 3 dernières transactions
        if len(self.agents) > 0:
            all_last_prices = [agent.last_prices[-3:] for agent in self.agents if len(agent.last_prices) >= 3]
            if all_last_prices:
                self.market_price = np.mean([price for sublist in all_last_prices for price in sublist])
            else:
                self.market_price = 0

class FinancialSystem:
    def __init__(self, agents, interest_rate):
        self.decision_space = DecisionSpace(agents)
        self.interest_rate = interest_rate

    def step(self):
        self.decision_space.make_decisions()
        self.decision_space.calculate_market_price()

# Initialisation des agents avec des portefeuilles d'actions
agents = [AgentState(wealth=1000, debt=500, assets=[Asset(intrinsic_value=100)], A=A, B=B, C=C) for _ in range(10)]

# Initialisation du système financier
initial_interest_rate = 0.5 
financial_system = FinancialSystem(agents, initial_interest_rate)

# Simulation sur plusieurs étapes
for _ in range(10):
    financial_system.step()

# Simulation et visualisation des résultats
wealth_over_time = []
prices_over_time = []

for _ in range(50):
    financial_system.step()
    wealth_over_time.append([agent.wealth for agent in agents])
    prices_over_time
